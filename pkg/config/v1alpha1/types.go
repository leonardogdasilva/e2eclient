// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package v1alpha1

import "fmt"
import "reflect"
import "encoding/json"

type ComponentDef struct {
	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty"`

	// Tasks corresponds to the JSON schema field "tasks".
	Tasks []TaskDef `json:"tasks,omitempty"`
}

type ParamDef struct {
	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty"`

	// Value corresponds to the JSON schema field "value".
	Value *string `json:"value,omitempty"`
}

type ParamsDef []ParamDef

type SchemaJson struct {
	// ApiVersion corresponds to the JSON schema field "apiVersion".
	ApiVersion SchemaJsonApiVersion `json:"apiVersion"`

	// Kind corresponds to the JSON schema field "kind".
	Kind SchemaJsonKind `json:"kind"`

	// Name of the scenario
	Name *string `json:"name,omitempty"`

	// Spec corresponds to the JSON schema field "spec".
	Spec *SchemaJsonSpec `json:"spec,omitempty"`
}

type SchemaJsonApiVersion string

// UnmarshalJSON implements json.Unmarshaler.
func (j *SchemaJsonKind) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SchemaJsonKind {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SchemaJsonKind, v)
	}
	*j = SchemaJsonKind(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SchemaJsonApiVersion) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SchemaJsonApiVersion {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SchemaJsonApiVersion, v)
	}
	*j = SchemaJsonApiVersion(v)
	return nil
}

const SchemaJsonApiVersionPismoIoE2EcliV1Alpha1 SchemaJsonApiVersion = "pismo.io/e2ecli/v1alpha1"

type SchemaJsonKind string

const SchemaJsonKindScenario SchemaJsonKind = "Scenario"

type SchemaJsonSpec struct {
	// Components corresponds to the JSON schema field "components".
	Components []ComponentDef `json:"components,omitempty"`

	// Setup corresponds to the JSON schema field "setup".
	Setup []ComponentDef `json:"setup,omitempty"`

	// Teardown corresponds to the JSON schema field "teardown".
	Teardown []ComponentDef `json:"teardown,omitempty"`
}

type TaskDef struct {
	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty"`

	// Params corresponds to the JSON schema field "params".
	Params ParamsDef `json:"params,omitempty"`

	// Script corresponds to the JSON schema field "script".
	Script *string `json:"script,omitempty"`
}

var enumValues_SchemaJsonApiVersion = []interface{}{
	"pismo.io/e2ecli/v1alpha1",
}
var enumValues_SchemaJsonKind = []interface{}{
	"Scenario",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SchemaJson) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	type Plain SchemaJson
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["apiVersion"]; !ok || v == nil {
		plain.ApiVersion = "pismo.io/e2ecli/v1alpha1"
	}
	if v, ok := raw["kind"]; !ok || v == nil {
		plain.Kind = "Scenario"
	}
	*j = SchemaJson(plain)
	return nil
}
